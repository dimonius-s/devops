---
# Install dependencies
- name: Install dependencies
  apt:
    name: ['curl', 'wget', 'tar', 'apt-transport-https', 'software-properties-common', 'adduser', 'libfontconfig1', 'musl', 'ruby-dev', 'build-essential']
    state: present
    update_cache: yes
# Install td-agent
- name: Install td-agent
  become: true
  shell: curl -fsSL https://toolbelt.treasuredata.com/sh/install-ubuntu-jammy-fluent-package5-lts.sh | sh
# Install fluent-plugin-prometheus
- name: Install fluent-plugin-prometheus
  command: fluent-gem install fluent-plugin-prometheus

# Install Prometheus
- name: Create Prometheus Exporter user
  user:
    name: prometheus
    system: yes
    shell: /bin/false
    
- name: Download and install Prometheus
  get_url:
    url: "https://github.com/prometheus/prometheus/releases/download/v{{ prometheus_version }}/prometheus-{{ prometheus_version }}.linux-amd64.tar.gz"
    dest: /tmp/prometheus.tar.gz
# Create Prometheus config directory
- name: Create Prometheus config directory
  file:
    path: /etc/prometheus
    state: directory
# Create Prometheus directory
- name: Ensure Prometheus directories exist
  become: yes
  file:
    path: "{{ item }}"
    state: directory
    owner: prometheus
    group: prometheus
    mode: '0755'
  loop:
    - /opt/prometheus
    - /etc/prometheus
    - /var/lib/prometheus
    
# Extract and move Prometheus binaries
- name: Extract and move Prometheus binaries
  become: true
  unarchive:
    src: /tmp/prometheus.tar.gz
    dest: /opt/prometheus
    remote_src: yes
    extra_opts: [ --strip-components=1 ]

# Create Prometheus systemd service
- name: Create Prometheus configuration file
  copy:
    dest: /etc/prometheus/prometheus.yml
    content: |
      ---
      global:
        scrape_interval: 15s

      rule_files:
        - "alert.rules.yml"
      scrape_configs:
        - job_name: 'prometheus'
          static_configs:
            - targets: ['localhost:9090']
        - job_name: 'alertmanager'
          static_configs:
            - targets: ['localhost:9093']
        - job_name: 'node_exporter'
          static_configs:
            - targets: ['localhost:9100']
        - job_name: 'blackbox'
          metrics_path: /probe
          params:
            module: [http_2xx]
          static_configs:
            - targets:
              - http://din-it.tech
          relabel_configs:
            - source_labels: [__address__]
              target_label: __param_target
            - source_labels: [__param_target]
              target_label: instance
            - target_label: __address__
              replacement: localhost:9115
        - job_name: 'fluentd'
          static_configs:
            - targets: ['localhost:24231']

#- name: Create Prometheus configuration file
#  copy:
#    dest: /etc/prometheus/web.yml
#    content: |
#      basic_auth_users:
#        {{ login }}: {{ pass }}

# Create Prometheus alert rules
- name: Create Prometheus rules directory
  file:
    path: /etc/prometheus
    state: directory
# Create Prometheus alert rules
- name: Create Prometheus systemd service
  copy:
    dest: /etc/systemd/system/prometheus.service
    content: |
      [Unit]
      Description=Prometheus
      Wants=network-online.target
      After=network-online.target

      [Service]
      User=prometheus
      Group=prometheus
      ExecStart=/opt/prometheus/prometheus \
        --config.file=/etc/prometheus/prometheus.yml \
        --storage.tsdb.path=/var/lib/prometheus \
        --web.console.libraries=/opt/prometheus/console_libraries \
        --web.console.templates=/opt/prometheus/consoles
       
      ExecReload=/bin/kill -HUP $MAINPID
      Restart=always
      SyslogIdentifier=prometheus
      Restart=always
      
      [Install]
      WantedBy=multi-user.target
      
# Install Node Exporter
- name: Create Node Exporter user
  user:
    name: node
    system: yes
    shell: /bin/false
  
- name: Download and install Node Exporter
  get_url:
    url: "https://github.com/prometheus/node_exporter/releases/download/v{{ node_exporter_version }}/node_exporter-{{ node_exporter_version }}.linux-amd64.tar.gz"
    dest: /tmp/node_exporter.tar.gz
    
# Create Node Exporter systemd service
- name: Ensure Prometheus directories exist
  become: yes
  file:
    path: "{{ item }}"
    state: directory
    owner: node
    group: node
    mode: '0755'
  loop:
    - /opt/node_exporter
    - /etc/node_exporter
    
# Extract and move Node Exporter binaries
- name: Extract and move Node Exporter binaries
  become: true
  unarchive:
    src: /tmp/node_exporter.tar.gz
    dest: /opt/node_exporter
    remote_src: yes
    extra_opts: [ --strip-components=1 ]
    
#- name: Create Node Exporter configuration file
#  copy:
#    dest: /etc/node_exporter/web.yml
#    content: |
#      basic_auth_users:
#        {{ login }}: {{ pass }}

# Create Node Exporter systemd service
- name: Create Node Exporter systemd service
  copy:
    dest: /etc/systemd/system/node.service
    content: |
      [Unit]
      Description=Node Exporter

      [Service]
      User=node
      Group=node
      ExecStart=/opt/node_exporter/node_exporter \
        --web.listen-address="0.0.0.0:9100"
        
      
      Restart=always
      [Install]
      WantedBy=multi-user.target
      
# Install Alertmanager
- name: Create Alertmanager  user
  user:
    name: alertmanager
    system: yes
    shell: /bin/false
    
- name: Download and install Alertmanager
  get_url:
    url: "https://github.com/prometheus/alertmanager/releases/download/v{{ alertmanager_version }}/alertmanager-{{ alertmanager_version }}.linux-amd64.tar.gz"
    dest: /tmp/alertmanager.tar.gz
# Create Alertmanager configuration directory
- name: Create Alertmanager configuration directory
  file:
    path: /etc/alertmanager
    state: directory
# Create Alertmanager systemd service
- name: Ensure Prometheus directories exist
  become: yes
  file:
    path: "{{ item }}"
    state: directory
    owner: alertmanager
    group: alertmanager
    mode: '0755'
  loop:
    - /opt/alertmanager
    - /etc/alertmanager
# Extract and move Alertmanager binary
- name: Extract and move Alertmanager binary
  unarchive:
    src: /tmp/alertmanager.tar.gz
    dest: /opt/alertmanager
    remote_src: yes
    extra_opts: [ --strip-components=1 ]
    
- name: Copy Alertmanager configuration
  copy:
    dest: /etc/alertmanager/alertmanager.yml
    content: |
      ---
      route:
        group_by: ['alertname']
        group_wait: 10s
        repeat_interval: 5m
        receiver: 'telegram-api'
      receivers:
        - name: 'telegram-api'
          telegram_configs:
          - bot_token: '5741443348:AAGODWlFC-FvaC8ybU61_rXMOrzpuePqACw'
            api_url: 'https://api.telegram.org'
            chat_id: 1271362249
            parse_mode: ''
            message: |
              {% raw %}🚨 Alertmanager 🚨
              -------------------------
              🔺 Alertname: {{ .GroupLabels.alertname}}
              🔺 Severity: {{ .CommonLabels.severity }}
              📌 {{ range .Alerts }}{{ .Annotations.summary }}
              {{ end }}{% endraw %}
  
# Create Alertmanager systemd service
- name: Create Alertmanager systemd service
  copy:
    dest: /etc/systemd/system/alertmanager.service
    content: |
      ---
      [Unit]
      Description=Alertmanager
      Wants=network-online.target
      After=network-online.target
      
      [Service]
      User=alertmanager
      Group=alertmanager
      Type=simple
      WorkingDirectory=/etc/alertmanager/
      ExecStart=/opt/alertmanager/alertmanager \
          --config.file=/etc/alertmanager/alertmanager.yml
      
      Restart=always
      [Install]
      WantedBy=multi-user.target

- name: Create Blackbox Exporter user
  user:
    name: blackbox
    system: yes
    shell: /bin/false

- name: Create Blackbox Exporter config directory
  file:
    path: /etc/blackbox
    state: directory

 
- name: Download and install Blackbox Exporter
  get_url:
    url: "https://github.com/prometheus/blackbox_exporter/releases/download/v{{ blackbox_exporter_version }}/blackbox_exporter-{{ blackbox_exporter_version }}.linux-amd64.tar.gz"
    dest: /tmp/blackbox_exporter.tar.gz

- name: Ensure Prometheus directories exist
  become: yes
  file:
    path: "{{ item }}"
    state: directory
    owner: blackbox
    group: blackbox
    mode: '0755'
  loop:
    - /opt/blackbox
    - /etc/blackbox
    - /var/lib/blackbox

- name: Extract and move Blackbox Exporter binaries
  become: true
  unarchive:
    src: /tmp/blackbox_exporter.tar.gz
    dest: /opt/blackbox
    remote_src: yes
    extra_opts: [ --strip-components=1 ]

- name: Create Blackbox Exporter configuration file
  copy:
    dest: /etc/blackbox/blackbox.yml
    content: |
      ---
      modules:
        http_2xx:
          prober: http
          timeout: 15s
          http:
            valid_http_versions: ["HTTP/1.1", "HTTP/2", "HTTP/2.0"]
            valid_status_codes: []  # Accept any status code.
            method: GET
            tls_config:
              insecure_skip_verify: true
            ip_protocol_fallback: false  # no fallback to "ip6"
            no_follow_redirects: false
            fail_if_ssl: false
            fail_if_not_ssl: false
            preferred_ip_protocol: "ip4"

#- name: Create Blackbox Exporter configuration file
#  copy:
#    dest: /etc/blackbox/web.yml
#    content: |
#      basic_auth_users:
#        {{ login }}: {{ pass }}

- name: Create Blackbox Exporter systemd service
  copy:
    dest: /etc/systemd/system/blackbox.service
    content: |
      ---
      [Unit]
      Description=Blackbox Exporter Service
      Wants=network-online.target
      After=network-online.target
      
      [Service]
      Type=simple
      User=blackbox
      Group=blackbox
      ExecStart=/opt/blackbox/blackbox_exporter \
        --config.file=/etc/blackbox/blackbox.yml \
        --web.listen-address="0.0.0.0:9115"
        
      Restart=always
      
      [Install]
      WantedBy=multi-user.target

- name: Wget grafana
  get_url:
    url: "https://dl.grafana.com/oss/release/grafana_{{ grafana_version }}_amd64.deb"
    dest: /tmp/grafana.deb

- name: Install Grafana
  apt:
    deb: /tmp/grafana.deb
    state: present

- name: Create Prometheus alert rules
  copy:
    dest: /etc/prometheus/alert.rules.yml
    content: |
      ---
      groups:
      - name: node_exporter_rules
        rules:
        - alert: HighCPUUsage
          expr: 100 - (avg by(instance) (irate(node_cpu_seconds_total{mode="idle"}[5m])) * 100) > 80
          for: 5m
          labels:
            severity: warning
          annotations:
            summary: "High CPU usage on {{ '{{ $labels.instance }}' }}"
            description: "CPU usage is above 80% (current value: {{ '{{ $value }}' }}%)"
        
        - alert: HighMemoryUsage
          expr: (node_memory_MemTotal_bytes - node_memory_MemAvailable_bytes) / node_memory_MemTotal_bytes * 100 > 80
          for: 5m
          labels:
            severity: warning
          annotations:
            summary: "High memory usage on {{ '{{ $labels.instance }}' }}"
            description: "Memory usage is above 80% (current value: {{ '{{ $value }}' }}%)"

        - alert: InstanceDown
          expr: up == 0
          for: 5m
          labels:
            severity: critical
          annotations:
            summary: "Instance {{ '{{ $labels.instance }}' }} down"
            description: "{{ '{{ $labels.instance }}' }} of job {{ '{{ $labels.job }}' }} has been down for more than 5 minutes."

        - alert: site_down
          expr: probe_success == 0
          for: 2m
          labels:
            severity: critical
          annotations:
            summary: "Критично: Сайт '{{ '{{ $labels.instance }}' }}' не доступен больше 2 минут"
            description: "Сайт {{ '{{ $labels.instance }}' }} не доступен"

        - alert: site_is_very_slow
          expr: sum by (instance) (probe_http_duration_seconds) > 3
          for: 3m
          labels:
            severity: warning
          annotations:
            summary: "Внимание: Сайт '{{ '{{ $labels.instance }}' }}' работает медленно (скорость ответа >3с) больше 3х минут"
            description: "Сайт {{ '{{ $labels.instance }}' }} работает медленно: {{ '{{ humanize $value }}' }}s"

        - alert: BlackboxSslCertificateWillExpireSoon
          expr: 3 <= round((last_over_time(probe_ssl_earliest_cert_expiry[10m]) - time()) / 86400, 0.1) < 20
          for: 0m
          labels:
            severity: warning
          annotations:
            summary: "SSL certificate will expire in {{ '{{ $value | humanizeDuration }}' }} (endpoint {{ '{{ $labels.instance }}' }})"
            description: "SSL certificate expires in less than 20 days\n  VALUE = {{ '{{ $value }}' }}\n  LABELS = {{ '{{ $labels }}' }}"

        - alert: BlackboxSslCertificateWillExpireSoon
          expr: 0 <= round((last_over_time(probe_ssl_earliest_cert_expiry[10m]) - time()) / 86400, 0.1) < 3
          for: 0m
          labels:
            severity: critical
          annotations:
            summary: "SSL certificate will expire in {{ '{{ $value | humanizeDuration }}' }} (endpoint {{ '{{ $labels.instance }}' }})"
            description: "SSL certificate expires in less than 3 days\n  VALUE = {{ '{{ $value }}' }}\n  LABELS = {{ '{{ $labels }}' }}"

        - alert: BlackboxSslCertificateExpired
          expr: round((last_over_time(probe_ssl_earliest_cert_expiry[10m]) - time()) / 86400, 0.1) < 0
          for: 0m
          labels:
            severity: critical
          annotations:
            summary: "SSL certificate will expire in {{ '{{ $value | humanizeDuration }}' }} (endpoint {{ '{{ $labels.instance }}' }})"
            description: "SSL certificate has expired already\n  VALUE = {{ '{{ $value }}' }}\n  LABELS = {{ '{{ $labels }}' }}"

        - alert: BlackboxProbeSlowHttp
          expr: avg_over_time(probe_http_duration_seconds[1m]) > 1
          for: 1m
          labels:
            severity: warning
          annotations:
            summary: "Blackbox probe slow HTTP (instance {{ '{{ $labels.instance }}' }})"
            description: "HTTP request took more than 1s\n  VALUE = {{ '{{ $value }}' }}\n  LABELS = {{ '{{ $labels }}' }}"

        - alert: FluentdHighErrorRate
          expr: rate(fluentd_tail_errors[5m]) > 0
          for: 10m
          labels:
            severity: warning
          annotations:
            summary: "High error rate in Fluentd"
            description: "Fluentd instance {{ '{{ $labels.instance }}' }} is experiencing a high error rate."

        - alert: FluentdHighThroughput
          expr: rate(fluentd_tail_total[5m]) > 1000
          for: 5m
          labels:
            severity: info
          annotations:
            summary: "High throughput in Fluentd"
            description: "Fluentd instance {{ '{{ $labels.instance }}' }} is processing a high number of logs per second."

        - alert: FluentdInstanceDown
          expr: up{job="fluentd"} == 0
          for: 5m
          labels:
            severity: critical
          annotations:
            summary: "Fluentd instance down"
            description: "Fluentd instance {{ '{{ $labels.instance }}' }} is down for more than 5 minutes."

        - alert: FluentdSlowProcessing
          expr: rate(fluentd_tail_total[5m]) < 5
          for: 10m
          labels:
            severity: warning
          annotations:
            summary: "Slow log processing in Fluentd"
            description: "Fluentd instance {{ '{{ $labels.instance }}' }} is processing logs slowly."

- name: Start Grafana service
  systemd:
    name: grafana-server
    state: started
    enabled: true

- name: Start Prometheus
  systemd:
    name: prometheus
    state: started
    enabled: true

- name: Start Node Exporter
  systemd:
    name: node
    state: started
    enabled: true

- name: Start Alertmanager
  systemd:
    name: alertmanager
    state: started
    enabled: true

- name: Start Blackbox Exporter
  systemd:
    name: blackbox
    state: started
    enabled: true
